#include <iostream>
using namespace std;

// Node structure for the Binary Search Tree
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
private:
    Node* root;

public:
    BinarySearchTree() : root(nullptr) {}

    // Function to insert a value into the BST
    void insert(int value) {
        root = insertRecursive(root, value);
    }

    // Recursive helper function to insert a value into the BST
    Node* insertRecursive(Node* current, int value) {
        if (current == nullptr) {
            return new Node(value);
        }

        if (value < current->data) {
            current->left = insertRecursive(current->left, value);
        } else if (value > current->data) {
            current->right = insertRecursive(current->right, value);
        }

        return current;
    }

    // Function to search for a value in the BST
    bool search(int value) {
        return searchRecursive(root, value);
    }

    // Recursive helper function to search for a value in the BST
    bool searchRecursive(Node* current, int value) {
        if (current == nullptr) {
            return false;
        }

        if (value == current->data) {
            return true;
        } else if (value < current->data) {
            return searchRecursive(current->left, value);
        } else {
            return searchRecursive(current->right, value);
        }
    }

    // Function to display the BST using in-order traversal
    void display() {
        cout << "In-order Traversal: ";
        inOrderTraversal(root);
        cout << endl;
    }

    // Recursive helper function for in-order traversal
    void inOrderTraversal(Node* current) {
        if (current != nullptr) {
            inOrderTraversal(current->left);
            cout << current->data << " ";
            inOrderTraversal(current->right);
        }
    }

    // Function to display leaf nodes in the BST
    void displayLeafNodes() {
        cout << "Leaf Nodes: ";
        displayLeafNodesRecursive(root);
        cout << endl;
    }

    // Recursive helper function to display leaf nodes
    void displayLeafNodesRecursive(Node* current) {
        if (current != nullptr) {
            if (current->left == nullptr && current->right == nullptr) {
                cout << current->data << " ";
            }
            displayLeafNodesRecursive(current->left);
            displayLeafNodesRecursive(current->right);
        }
    }
};

int main() {
    BinarySearchTree bst;

    // Input values into the BST
    int numValues;
    cout << "Enter the number of values to insert into the BST: ";
    cin >> numValues;

    cout << "Enter " << numValues << " values separated by spaces: ";
    for (int i = 0; i < numValues; ++i) {
        int value;
        cin >> value;
        bst.insert(value);
    }

    // Display the BST
    bst.display();

    // Search for a value in the BST
    int searchValue;
    cout << "Enter a value to search in the BST: ";
    cin >> searchValue;
    if (bst.search(searchValue)) {
        cout << searchValue << " found in the BST.\n";
    } else {
        cout << searchValue << " not found in the BST.\n";
    }

    // Display leaf nodes
    bst.displayLeafNodes();

    return 0;
}
